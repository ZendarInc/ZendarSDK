////////////////////////////////////////////////////////////////////////////////
// PRIMITIVES
// ---------------------------------------------------------------------------//
//  Types in this protocol specification are not specific to any specific sensor
// and may be used throughout.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto2";
option go_package = "github.com/ZendarInc/ShannonSDK/go/protocol";

package zen;

//
// A time record is comprised of a required 'common' time which is shared by
// all sensors in the array.  Some sensor may have their own onboard clocks
// with arbitrary offsets and units.  It is expected that a linear fit can be
// found between them which can bring sensor readings into a common clock.
//
message TimeRecord {
    required double common = 1;
    optional double sensor = 2;
};

message Quaternion {
    required double w = 1;
    required double x = 2;
    required double y = 3;
    required double z = 4;
};

message Vec2f {
    required float x = 1;
    required float y = 2;
};

message Vec2d {
    required double x = 1;
    required double y = 2;
};

message Vec3d {
    required double x = 1;
    required double y = 2;
    required double z = 3;
};

message RadarAngles {
    required double squint = 1;
    required double tilt   = 2;
    required double spin   = 3;
};

message Complex {
    required double real = 1;
    required double imag = 2;
};

//
// Extrinsics are defined as the affine transformation which brings the sensor
// into the 'common' reference frame.
//
// T and P are defined in meters
// Using quaternion multiplication,
//    P_common = (R * P_sensor * R_conjugate) + T
// If R is first converted to a rotation matrix,
//    P_common = (R_rotation_matrix * P_sensor) + T
// If the sensor is known to have fixed time latency to the common system time,
// that can be stored in 'time' in units of seconds.
message Extrinsic {
    required Quaternion   R     = 1;
    required Vec3d        T     = 2;
    optional double       time  = 3 [default=0.0];
};

message TimeIndex {
    required double common_time = 1;
    required uint64 file_offset = 2;
};
